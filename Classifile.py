# -*- coding: utf-8 -*-
"""DocMan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WtE6tnhXixGMZGL5mS9f_qqgtxS7Pr4D
"""

!pip install transformers==4.35.2 datasets==2.15.0 scikit-learn==1.2.2
!pip install langchain-community
!pip install pypdf

from transformers import pipeline
import torch
from torch import Tensor
from langchain_community.document_loaders import PyPDFLoader
from pypdf import PdfReader

def PDFloader(link):
    pdfreader = PdfReader(link)
    # read text from pdf
    raw_text = ""
    for i, page in enumerate(pdfreader.pages):
        content = page.extract_text()
        if content:
            raw_text += content

    num_of_pages = len(pdfreader.pages)
    num_of_words = len(raw_text)
    num_new_lines = raw_text.count("\n")
    period_counts = raw_text.count(".")
    print("Number of pages:", num_of_pages, "\n"
      "Number of words:", num_of_words, "\n"
      "Number of new lines:", num_new_lines, "\n"
      "Number of periods:" ,period_counts)
    #print(raw_text[0:num_of_words])
    return raw_text[0:num_of_words] #first hundred tokens so as to not overwhelm

def classification(sequences):
    device = "cuda" if torch.cuda.is_available() else "cpu"
    classifier = pipeline("zero-shot-classification",
                      model="facebook/bart-large-mnli",
                      device=device)
    #candidate_labels = ["Technology", "Business", "Legal", "Human Resources", "Tax", "Finance"]
    candidate_labels = ["Brokerage account agreements",
                        "Adding account features",
                        "Transfers distributions and payments",
                        "Retirement account forms",
                        "Tax and legal forms",
                        "Estate processing forms",
                        "Miscellaneous forms"]

    results = classifier(sequences, candidate_labels)
    return(results)

def Get_Top_Category(string_now):
  index_start = string_now.index('labels')
  index_end = index_start + 209
  reformed = string_now[index_start+9:index_end]
  print(reformed)
  reformed = reformed.replace('[', '')
  reformed = reformed.replace(']', '')
  reformed = reformed.replace("'", '')
  reformed = reformed.split(',')
  return(reformed[0])

def Output(category, path):
  start_index = path.index('src/')
  return path[start_index + 4:] + "|" + category

if __name__ == "__main__":
    #main function

    #Test Case 1:
    #classification(["Microsoft Pushes Off SP2 Release Microsoft will delay the release of its SP2 update for another week to fix software glitches."])

    #Test Case 2:
    #path = r'/usr/local/src/Expatriate_Certificate.pdf'

    #Test Case 3:
    path = r'/usr/local/src/Tax_and_legal_form.pdf'

    preliminary_string = classification(PDFloader(path))
    category = Get_Top_Category(str(preliminary_string))
    print(Output(category, path))

print(preliminary_string)

print(Output(category, path))

text_file = open("Output.txt", "w")
text_file.write(Output(category, path))
text_file.close()